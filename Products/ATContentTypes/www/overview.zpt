<tal:header tal:replace="structure here/manage_page_header|nothing">Header</tal:header>
<tal:message tal:define="manage_tabs_message options/manage_tabs_message | request/manage_tabs_message | nothing"
    tal:replace="structure here/manage_tabs">Tabs</tal:message>
<tal:body>

  <h3>Overview</h3>

  <p>This is your friendly ATContentTypes tool. It is a frontend to several
  important functions like
  </p>

  <dl>
    <dt>Version migration</dt>
    <dd>used to migrate ATContentTypes to a newer version just like the
        <code>plone_migration</code> tool</dd>
    <dt>Image scales</dt>
    <dd>to recreate image scales</dd>
    <dt>Type Migration</dt>
    <dd>to migrate old CMF style types to new ATContentTypes types</dd>
    <dt>Recatalog</dt>
    <dd>to recatalog CMF and ATCT content types. Types migration requires
        an up to date <code>portal_catalog</code>.</dd>
    <dt>Properties</dt>
    <dd>to set certain properties for migration, album view and more</dd>
  </dl>
  
  <h3>Version information</h3>
  
    <h4>File System</h4>
    
    <div tal:define="info here/getVersionFromFS"
         tal:content="python: '%s [numeric: %s]' % (info[1], str(info[0]))" /> 

    <h4>Plone Site</h4>
    
    <div tal:define="info here/getVersion"
         tal:content="python: '%s [numeric: %s]' % (info[1], str(info[0]))" />
       
  <h3>Properties</h3>
  
  <dl>
    <dt><code>image_types</code></dt>
    <dd>A list of portal type names to be treated as image. The types must be
        AT based, have an image field named <code>image</code> and implemented
        the <code>IImageContent</code> interface with the api methods
        <code>getImage()</code>, <code>setImage()</code> and
        <code>tag(scale=None)</code>.
    </dd>
    <dt><code>folder_types</code></dt>
    <dd>A list of portal types to be treated as subalbums in the photo
        album view.
    </dd>
    <dt><code>album_batch_size</code></dt>
    <dd>The default batch size for the photo album view.</dd>
    <dt><code>album_image_scale</code></dt>
    <dd>The default image scale name for the photo ablum view.</dd>
    <dt><code>single_image_scale</code></dt>
    <dd>The default image scale name used when showing a single image.</dd>
    <dt><code>migration_catalog_patch</code></dt>
    <dd>Use the portal catalog patch for migration. Enabling the patch might
        increase the migration speed dramatically. Especially folder migration
        speed can gain up to several 100%.
    </dd>
    <dt><code>migration_transaction_size</code></dt>
    <dd>Amount of objects before a subtransaction, full transaction or
        savepoint is created. A lower value will slow down migration but
        decrease the memory usage. A higher value could increase the amount
        of objects you have to migrate again in the case of an error.
    </dd>
    <dt><code>migration_transaction_style</code></dt>
    <dd><dl>
      <dt><code>None</code></dt>
      <dd>Don't use any special transaction handling. A subtransaction is
          going to be committed after <code>migration_transaction_size</code>
          in order to decrease the memory usage.
      </dd>
      <dt><code>full transaction</code></dt>
      <dd>A full transaction is going to be committed after
          <code>migration_transaction_size</code> objects are migrated. In a
          case of an error you can resume the migration at the last full
          transaction. There is a slim chance that this setting can corrupt
          your database
      </dd>
      <dt><code>savepoint</code></dt>
      <dd><em>Requires Zope 2.8.1 or higher!</em> A savepoint is created after
          <code>migration_transaction_size</code> objects are migrated. In the
          case of an error the transaction is rolled back to the last
          savepoint. All objects migrated between the last savepoint and the
          error are reverted to their original state. After the migration is
          finished you should fix the error and migrate the remaining old
          objects.
      </dd>
    </dl>
    </dd>
  </dl>

  <h3>README</h3>
  
  <div tal:content="structure here/getReadme" />

</tal:body>
<tal:footer tal:replace="structure here/manage_page_footer|nothing">footer</tal:footer>
