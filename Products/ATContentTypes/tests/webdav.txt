============
WebDAV tests
============

ATContentTypes supports WebDAV and FTP uploads with small differences
from ordinary AT based content types.

First, we are going to setup an environment so we can test that stuff
is acquired or not acquired at the right times. The code is based on
Sidneys tests for Archetypes.

  >>> import os
  >>> from Products.Archetypes.tests.attestcase import user_name
  >>> from Products.Archetypes.tests.attestcase import user_password
  >>> from Products.Archetypes.tests.atsitetestcase import portal_name
  >>> from Products.ATContentTypes.tests.atcttestcase import test_home
  
  Input directory with test files
  >>> input_dir = os.path.join(test_home, 'input')

  CMF and Plone sites may have different default titles so we set one
  >>> self.setRoles(['Manager'])
  >>> self.portal.setTitle('Portal Title')
  >>> self.setRoles(['Member'])
  
  Use the member's home folder as play ground for the tests
  >>> folder = self.folder
  >>> fpath = '/'.join(folder.getPhysicalPath())    

WebDAV PUT
==========

ATContentTypes registers several file extensions and mimetypes in the content
type registry. WebDAV and FTP uploads should create the rigt content types.

Document
--------

  >>> input = open(os.path.join(input_dir, 'test-document.txt'))
  
  Create object by content type
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-document HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: text/html; charset="utf-8"
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  >>> document = self.folder['test-document']
  >>> input.seek(0)
  
  >>> print document.getPortalTypeName()
  Document

  >>> print document.Title()
  test document

  >>> print document.getText()
  <em>test document body text</em>
  <BLANKLINE>
  
  >>> print document.Description()
  test document description
  
  >>> print document.getContentType()
  text/html
  
  >>> print document.Subject()
  ('test keyword 1', 'test keyword 2')
  
  >>> print document.Contributors()
  ('John Dow', 'Example User')
  
  >>> print document.Creators()
  ('test_user_1_',)
  
  >>> print document.EffectiveDate()
  2005-01-01 00:00:00
  
  >>> print document.ExpirationDate()
  2005-02-01 00:00:00
  
  >>> print document.Language()
  de
  
  >>> print document.Rights()
  GPL
  
  >>> print document.getLayout()
  document_view
  
  >>> del document
  
  
  Create object by file extension
  
  >>> print http(r"""
  ... PUT /%s/test-document2.txt HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, "a test"))
  HTTP/1.1 201 Created
  ...

  >>> document = self.folder['test-document2.txt']
  >>> input.seek(0)
  
  >>> print document.getPortalTypeName()
  Document

  >>> print document.Title()
  test-document2.txt
  
  >>> print document.getText()
  <p>a test</p>
  
  >>> del document
  
Event
-----

  >>> input = open(os.path.join(input_dir, 'test-event.txt'), 'rb')
  
  Create an object by extension
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-event.event HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  XXX: .event should be removed?
  
  >>> event = self.folder['test-event.event']
  
  >>> print event.getPortalTypeName()
  Event
  
  >>> print event.Title()
  test event

  >>> del event

File
----

  >>> input = open(os.path.join(input_dir, 'test.zip'), 'rb')
 
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-file HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: application/zip
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...
  
  >>> file = self.folder['test-file']

  >>> print file.getPortalTypeName()
  File

  manage_afterPUT sets the Title according to the file name
  
  >>> print file.Title()
  test-file
  
  >>> input.seek(0)
  >>> print str(file.getFile()) == input.read()
  True
  
  >>> print file.getContentType()
  application/zip
  
  >>> del file
  
  
  Create an object by extension
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-file.zip HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  >>> file = self.folder['test-file.zip']
  
  >>> print file.getPortalTypeName()
  File
  
  >>> print file.Title()
  test-file.zip
  
  >>> print file.getContentType()
  application/zip

  >>> del file


Image
-----

  >>> input = open(os.path.join(test_home, 'test.gif'), 'rb')
  
  Create an object by content type
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-image HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Content-Type: image/gif
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  >>> image = self.folder['test-image']
  
  >>> print image.getPortalTypeName()
  Image

  manage_afterPUT sets the Title according to the file name
  
  >>> print image.Title()
  test-image
  
  >>> input.seek(0)
  >>> print str(image.getImage().data) == input.read()
  True
  
  >>> print image.getContentType()
  image/gif
  
  >>> del image
  
  
  Create an object by extension
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-image.gif HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  >>> image = self.folder['test-image.gif']
  
  >>> print image.getPortalTypeName()
  Image
  
  >>> print image.Title()
  test-image.gif
  
  >>> print image.getContentType()
  image/gif

  >>> del image

  Now test the name mangeling. White spaces are replaces by a dash.
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test%%20my%%20image.gif HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  XXX: Note that name mangeling for WebDAV PUTs are not supported at the
  moment!
  
  >>> image = self.folder['test my image.gif']
  
  >>> print image.getPortalTypeName()
  Image
  
  >>> print image.Title()
  test my image.gif
  
  >>> print image.getContentType()
  image/gif

Link
----

  >>> input = open(os.path.join(input_dir, 'test-link.txt'), 'rb')
  
  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-link.link HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  XXX: .link should be removed?
  
  >>> link = self.folder['test-link.link']
  
  >>> print link.getPortalTypeName()
  Link
  
  >>> print link.Title()
  test link

  >>> del link

News Item
---------

  >>> input = open(os.path.join(input_dir, 'test-news-item.txt'), 'rb')

  >>> input.seek(0)
  >>> print http(r"""
  ... PUT /%s/test-newsitem.news HTTP/1.1
  ... Authorization: Basic %s:%s
  ... Depth: 0
  ...
  ... %s
  ... """ % (fpath, user_name, user_password, input.read()))
  HTTP/1.1 201 Created
  ...

  XXX: .news should be removed?
  
  >>> news = self.folder['test-newsitem.news']
  
  >>> print news.getPortalTypeName()
  News Item
  
  >>> print news.Title()
  test news item

  >>> del news

WebDAV MKCOL
============

Folder
------

BTreeFolder
-----------
  
